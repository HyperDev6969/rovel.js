'use strict';/* eslint-disable class-methods-use-this */ // eslint-disable-next-line no-nested-ternary
var cov_1yunaupzzz=function(){var path="/data/data/com.termux/files/home/rovelapi/extra/rss-reader/src/FeedManager.js";var hash="bd7227ad05d2970b270f308959c22fe0db55f437";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/data/data/com.termux/files/home/rovelapi/extra/rss-reader/src/FeedManager.js",statementMap:{"0":{start:{line:6,column:15},end:{line:6,column:88}},"1":{start:{line:6,column:24},end:{line:6,column:88}},"2":{start:{line:6,column:35},end:{line:6,column:87}},"3":{start:{line:26,column:4},end:{line:26,column:28}},"4":{start:{line:31,column:4},end:{line:31,column:21}},"5":{start:{line:33,column:4},end:{line:35,column:6}},"6":{start:{line:45,column:4},end:{line:45,column:36}},"7":{start:{line:62,column:4},end:{line:68,column:7}},"8":{start:{line:63,column:34},end:{line:63,column:65}},"9":{start:{line:64,column:6},end:{line:66,column:7}},"10":{start:{line:65,column:8},end:{line:65,column:21}},"11":{start:{line:67,column:6},end:{line:67,column:25}},"12":{start:{line:85,column:4},end:{line:90,column:7}},"13":{start:{line:86,column:6},end:{line:86,column:30}},"14":{start:{line:87,column:6},end:{line:89,column:7}},"15":{start:{line:88,column:8},end:{line:88,column:54}},"16":{start:{line:99,column:4},end:{line:99,column:39}},"17":{start:{line:109,column:18},end:{line:109,column:45}},"18":{start:{line:110,column:17},end:{line:113,column:5}},"19":{start:{line:114,column:4},end:{line:114,column:36}},"20":{start:{line:115,column:4},end:{line:115,column:31}},"21":{start:{line:116,column:4},end:{line:116,column:32}},"22":{start:{line:117,column:4},end:{line:117,column:49}},"23":{start:{line:118,column:4},end:{line:120,column:5}},"24":{start:{line:119,column:6},end:{line:119,column:106}},"25":{start:{line:124,column:0},end:{line:124,column:29}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:15},end:{line:6,column:16}},loc:{start:{line:6,column:24},end:{line:6,column:88}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:6,column:24},end:{line:6,column:25}},loc:{start:{line:6,column:35},end:{line:6,column:87}},line:6},"2":{name:"(anonymous_2)",decl:{start:{line:21,column:2},end:{line:21,column:3}},loc:{start:{line:21,column:29},end:{line:36,column:3}},line:21},"3":{name:"(anonymous_3)",decl:{start:{line:44,column:2},end:{line:44,column:3}},loc:{start:{line:44,column:24},end:{line:46,column:3}},line:44},"4":{name:"(anonymous_4)",decl:{start:{line:61,column:2},end:{line:61,column:3}},loc:{start:{line:61,column:25},end:{line:69,column:3}},line:61},"5":{name:"(anonymous_5)",decl:{start:{line:62,column:38},end:{line:62,column:39}},loc:{start:{line:62,column:55},end:{line:68,column:5}},line:62},"6":{name:"(anonymous_6)",decl:{start:{line:84,column:2},end:{line:84,column:3}},loc:{start:{line:84,column:42},end:{line:91,column:3}},line:84},"7":{name:"(anonymous_7)",decl:{start:{line:85,column:26},end:{line:85,column:27}},loc:{start:{line:85,column:36},end:{line:90,column:5}},line:85},"8":{name:"(anonymous_8)",decl:{start:{line:98,column:2},end:{line:98,column:3}},loc:{start:{line:98,column:17},end:{line:100,column:3}},line:98},"9":{name:"(anonymous_9)",decl:{start:{line:108,column:2},end:{line:108,column:3}},loc:{start:{line:108,column:30},end:{line:121,column:3}},line:108}},branchMap:{"0":{loc:{start:{line:6,column:35},end:{line:6,column:87}},type:"cond-expr",locations:[{start:{line:6,column:55},end:{line:6,column:56}},{start:{line:6,column:60},end:{line:6,column:86}}],line:6},"1":{loc:{start:{line:6,column:60},end:{line:6,column:86}},type:"cond-expr",locations:[{start:{line:6,column:80},end:{line:6,column:82}},{start:{line:6,column:85},end:{line:6,column:86}}],line:6},"2":{loc:{start:{line:64,column:6},end:{line:66,column:7}},type:"if",locations:[{start:{line:64,column:6},end:{line:66,column:7}},{start:{line:64,column:6},end:{line:66,column:7}}],line:64},"3":{loc:{start:{line:87,column:6},end:{line:89,column:7}},type:"if",locations:[{start:{line:87,column:6},end:{line:89,column:7}},{start:{line:87,column:6},end:{line:89,column:7}}],line:87},"4":{loc:{start:{line:87,column:12},end:{line:87,column:52}},type:"binary-expr",locations:[{start:{line:87,column:12},end:{line:87,column:21}},{start:{line:87,column:25},end:{line:87,column:52}}],line:87},"5":{loc:{start:{line:118,column:4},end:{line:120,column:5}},type:"if",locations:[{start:{line:118,column:4},end:{line:120,column:5}},{start:{line:118,column:4},end:{line:120,column:5}}],line:118},"6":{loc:{start:{line:118,column:8},end:{line:118,column:49}},type:"binary-expr",locations:[{start:{line:118,column:8},end:{line:118,column:17}},{start:{line:118,column:21},end:{line:118,column:49}}],line:118}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"bd7227ad05d2970b270f308959c22fe0db55f437"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();cov_1yunaupzzz.s[0]++;const sortBy=key=>{cov_1yunaupzzz.f[0]++;cov_1yunaupzzz.s[1]++;return(a,b)=>{cov_1yunaupzzz.f[1]++;cov_1yunaupzzz.s[2]++;return a[key]>b[key]?(cov_1yunaupzzz.b[0][0]++,1):(cov_1yunaupzzz.b[0][1]++,b[key]>a[key]?(cov_1yunaupzzz.b[1][0]++,-1):(cov_1yunaupzzz.b[1][1]++,0));};};/**
 * Management class for feeds
 * @property {FeedEmitter} instance feed emitter instance to handle events
 * @property {Feed} feed feed to store configuration and items
 */class FeedManager{/**
   * Manage a feed from a specific emitter
   * Side effect:
   *  - Sets the error handler for the feed.
   * @param {FeedEmitter} emitter emitter that will create events per item
   * @param {Feed} feed    feed to store items and retrieve configuration from
   */constructor(emitter,feed){cov_1yunaupzzz.f[2]++;cov_1yunaupzzz.s[3]++;/**
     * Instance to manage
     * @type {FeedEmitter}
     */this.instance=emitter;/**
     * Feed to emit items for
     * @type {Feed}
     */cov_1yunaupzzz.s[4]++;this.feed=feed;cov_1yunaupzzz.s[5]++;this.feed.handler={handle:this.onError.bind(this)};}/**
   * Sort all received items since we want to
   * emit them in ascending order.
   * @private
   * @param  {Object} data data to sort items on
   */sortItemsByDate(data){cov_1yunaupzzz.f[3]++;cov_1yunaupzzz.s[6]++;data.items.sort(sortBy('date'));}/**
   * Truncated feed data fetched from web
   * @typedef {Object} FeedTrunc
   * @property {FeedItem[]} items new feed items to be added
   * @property {string} url feed url that is fetched
   */ /**
   * Put all new items inside a "newItems" property
   * @private
   * @param  {FeedTrunc} data Data to mutate
   */identifyNewItems(data){cov_1yunaupzzz.f[4]++;cov_1yunaupzzz.s[7]++;data.newItems=data.items.filter(fetchedItem=>{cov_1yunaupzzz.f[5]++;const foundItemInsideFeed=(cov_1yunaupzzz.s[8]++,this.feed.findItem(fetchedItem));cov_1yunaupzzz.s[9]++;if(foundItemInsideFeed){cov_1yunaupzzz.b[2][0]++;cov_1yunaupzzz.s[10]++;return false;}else{cov_1yunaupzzz.b[2][1]++;}cov_1yunaupzzz.s[11]++;return fetchedItem;});}/**
   * New data to add to f a feed
   * @typedef {Object} FeedData
   * @property {Feed[]} newItems
   */ /**
   * Now that we have all the new items, add them to the
   feed item list.
   * @private
   * @param  {FeedData} data data to mutate
   * @param {boolean} firstload Whether or not this is the first laod
   */populateNewItemsInFeed(data,firstload){cov_1yunaupzzz.f[6]++;cov_1yunaupzzz.s[12]++;data.newItems.forEach(item=>{cov_1yunaupzzz.f[7]++;cov_1yunaupzzz.s[13]++;this.feed.addItem(item);cov_1yunaupzzz.s[14]++;if(!((cov_1yunaupzzz.b[4][0]++,firstload)&&(cov_1yunaupzzz.b[4][1]++,this.instance.skipFirstLoad))){cov_1yunaupzzz.b[3][0]++;cov_1yunaupzzz.s[15]++;this.instance.emit(this.feed.eventName,item);}else{cov_1yunaupzzz.b[3][1]++;}});}/**
   * Handle errors during processing
   * @private
   * @param  {FeedError} error handle error
   */onError(error){cov_1yunaupzzz.f[8]++;cov_1yunaupzzz.s[16]++;this.instance.emit('error',error);}/**
   * Get content from the managed feed
   * @public
   * @async
   * @param  {boolean}  firstload whether or not this is the first load on the manager
   */async getContent(firstload){cov_1yunaupzzz.f[9]++;const items=(cov_1yunaupzzz.s[17]++,await this.feed.fetchData());const data=(cov_1yunaupzzz.s[18]++,{items,url:this.feed.url});cov_1yunaupzzz.s[19]++;this.feed.updateHxLength(items);cov_1yunaupzzz.s[20]++;this.sortItemsByDate(data);cov_1yunaupzzz.s[21]++;this.identifyNewItems(data);cov_1yunaupzzz.s[22]++;this.populateNewItemsInFeed(data,firstload);cov_1yunaupzzz.s[23]++;if((cov_1yunaupzzz.b[6][0]++,firstload)&&(cov_1yunaupzzz.b[6][1]++,!this.instance.skipFirstLoad)){cov_1yunaupzzz.b[5][0]++;cov_1yunaupzzz.s[24]++;this.instance.emit(`initial-load:${this.feed.url}`,{url:this.feed.url,items:this.feed.items});}else{cov_1yunaupzzz.b[5][1]++;}}}cov_1yunaupzzz.s[25]++;module.exports=FeedManager;